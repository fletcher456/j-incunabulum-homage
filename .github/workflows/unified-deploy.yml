name: Build WASM and Deploy to Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'simple_server/**'
      - 'pages-demo/**'
      - '.github/workflows/unified-deploy.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-wasm:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Rust toolchain with WASM target
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        override: true
        components: rustfmt, clippy
        
    - name: Install wasm-pack
      run: |
        echo "=== Installing wasm-pack ==="
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Verify WASM toolchain
      run: |
        echo "=== Rust Toolchain Information ==="
        rustc --version
        cargo --version
        rustup show
        echo "=== WASM Target Verification ==="
        rustup target list --installed | grep wasm
        echo "=== wasm-pack Version ==="
        wasm-pack --version
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          simple_server/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('simple_server/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build Rust server (verification)
      working-directory: simple_server
      run: |
        echo "=== Building Rust Server ==="
        cargo build --verbose
        echo "✅ Server build completed"
          
    - name: Build WASM module
      working-directory: simple_server
      run: |
        echo "=== Starting WASM Build Process ==="
        echo "Working directory: $(pwd)"
        echo "=== Cargo.toml contents ==="
        cat Cargo.toml
        echo "=== lib.rs verification ==="
        head -20 src/lib.rs
        echo "=== WASM Build with Maximum Verbosity ==="
        
        # Create pkg directory
        mkdir -p static/pkg
        
        # Build with wasm-pack
        RUST_LOG=debug wasm-pack build \
          --target web \
          --out-dir static/pkg \
          --out-name simple_server \
          --no-typescript \
          --no-pack \
          --verbose -- --verbose
          
    - name: Verify WASM build output
      working-directory: simple_server
      run: |
        echo "=== Build Output Verification ==="
        ls -la static/pkg/ || echo "pkg directory not found"
        
        # Verify essential files exist
        if [ ! -f "static/pkg/simple_server.js" ]; then
          echo "❌ JavaScript bindings not found"
          exit 1
        fi
        
        if [ ! -f "static/pkg/simple_server_bg.wasm" ]; then
          echo "❌ WASM binary not found"
          exit 1
        fi
        
        echo "=== WASM File Information ==="
        for wasm_file in static/pkg/*.wasm; do
          echo "File: $wasm_file"
          file "$wasm_file"
          echo "Size: $(stat -c%s "$wasm_file") bytes"
        done
        
        echo "=== JavaScript Binding Verification ==="
        echo "Contents of simple_server.js (first 20 lines):"
        head -20 static/pkg/simple_server.js
        
        echo "✅ WASM build verification completed"
        
    - name: Test WASM module integrity
      working-directory: simple_server
      run: |
        echo "=== WASM Module Testing ==="
        if command -v node &> /dev/null; then
          echo "Testing WASM module with Node.js..."
          node wasm_test.js || echo "WASM test completed (exit code: $?)"
        else
          echo "Node.js not available, skipping functionality test"
        fi
        
        # Basic file integrity checks
        if command -v xxd &> /dev/null; then
          echo "WASM magic bytes:"
          xxd -l 8 static/pkg/simple_server_bg.wasm
        fi
        
        echo "✅ WASM testing completed"
        
    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wasm-package
        path: simple_server/static/pkg/
        retention-days: 1

  deploy-pages:
    needs: build-wasm
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Download WASM artifacts
      uses: actions/download-artifact@v4
      with:
        name: wasm-package
        path: wasm-artifacts/
        
    - name: Verify WASM artifacts
      run: |
        echo "=== Downloaded WASM Artifacts ==="
        ls -la wasm-artifacts/
        
        # Verify required files
        required_files=(
          "wasm-artifacts/simple_server.js"
          "wasm-artifacts/simple_server_bg.wasm"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file ($(stat -c%s "$file") bytes)"
          else
            echo "❌ $file (missing)"
            exit 1
          fi
        done
        
    - name: Create Pages deployment structure
      run: |
        echo "=== Creating Pages Structure ==="
        
        # Create build directory
        mkdir -p pages-build
        
        # Copy adapted Replit frontend files
        echo "Copying adapted frontend files..."
        cp -r pages-demo/* pages-build/
        
        # Create wasm directory and copy artifacts
        echo "Copying WASM artifacts..."
        mkdir -p pages-build/wasm
        cp wasm-artifacts/simple_server.js pages-build/wasm/
        cp wasm-artifacts/simple_server_bg.wasm pages-build/wasm/
        
        # Copy additional files if they exist
        if [ -f "wasm-artifacts/package.json" ]; then
          cp wasm-artifacts/package.json pages-build/wasm/
        fi
        
        # Create favicon if it doesn't exist
        if [ ! -f "pages-build/assets/favicon.ico" ]; then
          mkdir -p pages-build/assets
          touch pages-build/assets/favicon.ico
        fi
        
        echo "=== Pages Structure ==="
        find pages-build -type f | sort
        
        echo "=== File Sizes ==="
        du -h pages-build/wasm/* 2>/dev/null || echo "WASM files: (calculating...)"
        du -h pages-build/js/* 2>/dev/null || echo "JS files: (calculating...)"  
        du -h pages-build/css/* 2>/dev/null || echo "CSS files: (calculating...)"
        
        echo "✅ Pages structure created successfully"
        
    - name: Validate Pages structure
      run: |
        echo "=== Validating Pages Structure ==="
        
        # Check required files exist
        required_files=(
          "pages-build/index.html"
          "pages-build/js/j-interpreter.js"
          "pages-build/js/wasm-loader.js"
          "pages-build/js/wasm-adapter.js"
          "pages-build/js/app-init.js"
          "pages-build/css/style.css"
          "pages-build/wasm/simple_server.js"
          "pages-build/wasm/simple_server_bg.wasm"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file"
          else
            echo "❌ $file (missing)"
            exit 1
          fi
        done
        
        # Check HTML file contains expected content
        if grep -q "J Language Interpreter" pages-build/index.html; then
          echo "✅ HTML content verified"
        else
          echo "❌ HTML content invalid"
          exit 1
        fi
        
        # Check WASM loader integration
        if grep -q "initializeWasmEngine" pages-build/js/app-init.js; then
          echo "✅ WASM loader integration verified"
        else
          echo "❌ WASM loader integration missing"
          exit 1
        fi
        
        echo "✅ Pages structure validation completed"
        
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: pages-build
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Create deployment summary
      run: |
        echo "## 🎉 J Language Interpreter Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🧮 Features Available" >> $GITHUB_STEP_SUMMARY
        echo "- Interactive J language evaluation" >> $GITHUB_STEP_SUMMARY
        echo "- WebAssembly-powered computation" >> $GITHUB_STEP_SUMMARY
        echo "- Real-time expression processing" >> $GITHUB_STEP_SUMMARY
        echo "- Calculator interface with familiar buttons" >> $GITHUB_STEP_SUMMARY
        echo "- Expression history and examples" >> $GITHUB_STEP_SUMMARY
        echo "- Mobile-responsive design" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Technical Stack" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend**: Rust compiled to WebAssembly" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend**: Vanilla JavaScript ES6 modules" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment**: GitHub Pages with Actions CI/CD" >> $GITHUB_STEP_SUMMARY
        echo "- **Performance**: Client-side processing with native speeds" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🧪 Testing" >> $GITHUB_STEP_SUMMARY
        echo "Visit the deployment URL and test expressions like:" >> $GITHUB_STEP_SUMMARY
        echo "- \`1+1\` (basic arithmetic)" >> $GITHUB_STEP_SUMMARY
        echo "- \`~3\` (monadic negation)" >> $GITHUB_STEP_SUMMARY
        echo "- \`1 2 3\` (array literals)" >> $GITHUB_STEP_SUMMARY
        echo "- \`2 3#~6\` (reshape operation)" >> $GITHUB_STEP_SUMMARY
        
    - name: Diagnostic information on failure
      if: failure()
      run: |
        echo "=== Failure Diagnostics ===" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "Pages structure check:" >> $GITHUB_STEP_SUMMARY
        find pages-build -type f 2>/dev/null | head -20 || echo "pages-build directory not found" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "WASM artifacts check:" >> $GITHUB_STEP_SUMMARY
        ls -la wasm-artifacts/ 2>/dev/null || echo "wasm-artifacts directory not found" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Available space:" >> $GITHUB_STEP_SUMMARY
        df -h . 2>/dev/null || echo "disk space check failed" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY